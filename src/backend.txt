backend/
├── config/
│   ├── db.js
│   └── config.js
├── controllers/
│   ├── authController.js
│   └── symptomController.js
├── models/
│   ├── User.js
│   └── Symptom.js
├── routes/
│   ├── authRoutes.js
│   └── symptomRoutes.js
├── services/
│   ├── translationService.js
│   └── ttsService.js
├── app.js
└── server.js

config/db.js

const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB Connected...');
  } catch (err) {
    console.error('Database connection error:', err.message);
    process.exit(1);
  }
};

config/config.js

module.exports = connectDB;

module.exports = {
  PORT: process.env.PORT || 5000,
  JWT_SECRET: process.env.JWT_SECRET || 'your-secret-key',
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb://localhost:27017/medical_assistant',
  TRANSLATION_API_KEY: process.env.TRANSLATION_API_KEY,
  TTS_API_KEY: process.env.TTS_API_KEY
};


models/User.js

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const config = require('../config/config');

const UserSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  name: {
    type: String,
    required: true
  },
  age: {
    type: Number,
    required: true
  },
  gender: {
    type: String,
    enum: ['male', 'female', 'other'],
    required: true
  },
  preferredLanguage: {
    type: String,
    default: 'en'
  },
  tokens: [{
    token: {
      type: String,
      required: true
    }
  }]
}, { timestamps: true });

// Hash password before saving
UserSchema.pre('save', async function(next) {
  if (this.isModified('password')) {
    this.password = await bcrypt.hash(this.password, 8);
  }
  next();
});

// Generate auth token
UserSchema.methods.generateAuthToken = async function() {
  const user = this;
  const token = jwt.sign({ _id: user._id }, config.JWT_SECRET, { expiresIn: '7d' });
  
  user.tokens = user.tokens.concat({ token });
  await user.save();
  return token;
};

// Find user by credentials
UserSchema.statics.findByCredentials = async (userId, password) => {
  const user = await User.findOne({ userId });
  if (!user) {
    throw new Error('Invalid login credentials');
  }
  
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    throw new Error('Invalid login credentials');
  }
  
  return user;
};

const User = mongoose.model('User', UserSchema);
module.exports = User;


models/Symptom.js

const mongoose = require('mongoose');

const SymptomSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  symptoms: {
    type: String,
    required: true
  },
  language: {
    type: String,
    default: 'en'
  },
  diagnosis: {
    type: String
  },
  remedies: {
    type: String
  },
  date: {
    type: Date,
    default: Date.now
  }
});

const Symptom = mongoose.model('Symptom', SymptomSchema);
module.exports = Symptom;

controllers/authController.js

const User = require('../models/User');
const jwt = require('jsonwebtoken');
const config = require('../config/config');

// Register a new user
exports.register = async (req, res) => {
  const { userId, password, name, age, gender, preferredLanguage } = req.body;
  
  try {
    const userExists = await User.findOne({ userId });
    if (userExists) {
      return res.status(400).json({ error: 'User ID already exists' });
    }
    
    const user = new User({
      userId,
      password,
      name,
      age,
      gender,
      preferredLanguage
    });
    
    await user.save();
    const token = await user.generateAuthToken();
    
    res.status(201).json({ user, token });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Login user
exports.login = async (req, res) => {
  const { userId, password } = req.body;
  
  try {
    const user = await User.findByCredentials(userId, password);
    const token = await user.generateAuthToken();
    
    res.json({ 
      user: {
        _id: user._id,
        userId: user.userId,
        name: user.name,
        age: user.age,
        gender: user.gender,
        preferredLanguage: user.preferredLanguage
      },
      token 
    });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Get user profile
exports.getProfile = async (req, res) => {
  res.json(req.user);
};

// Update user profile
exports.updateProfile = async (req, res) => {
  const updates = Object.keys(req.body);
  const allowedUpdates = ['name', 'age', 'gender', 'preferredLanguage', 'password'];
  const isValidOperation = updates.every(update => allowedUpdates.includes(update));
  
  if (!isValidOperation) {
    return res.status(400).json({ error: 'Invalid updates!' });
  }
  
  try {
    updates.forEach(update => req.user[update] = req.body[update]);
    await req.user.save();
    res.json(req.user);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Logout user
exports.logout = async (req, res) => {
  try {
    req.user.tokens = req.user.tokens.filter(token => token.token !== req.token);
    await req.user.save();
    res.json({ message: 'Logged out successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


controllers/symptomController.js

const Symptom = require('../models/Symptom');
const User = require('../models/User');
const { translateText } = require('../services/translationService');
const { textToSpeech } = require('../services/ttsService');

// Submit symptoms
exports.submitSymptoms = async (req, res) => {
  const { symptoms, language } = req.body;
  
  try {
    // In a real app, you would integrate with a medical API or database here
    // This is a simplified example with mock responses
    
    // Translate symptoms to English for processing (if needed)
    let symptomsEnglish = symptoms;
    if (language !== 'en') {
      symptomsEnglish = await translateText(symptoms, language, 'en');
    }
    
    // Mock diagnosis and remedies (replace with actual medical logic)
    const diagnosisMap = {
      fever: 'Possible viral infection',
      cough: 'Respiratory tract infection',
      headache: 'Tension headache or migraine',
      stomach: 'Indigestion or food poisoning'
    };
    
    const remediesMap = {
      fever: 'Rest, drink fluids, take paracetamol',
      cough: 'Honey and lemon, stay hydrated, cough syrup if needed',
      headache: 'Rest in a dark room, pain relievers, hydration',
      stomach: 'BRAT diet (bananas, rice, applesauce, toast), hydration'
    };
    
    let diagnosis = 'Consult a doctor for proper diagnosis';
    let remedies = 'Get adequate rest and hydration';
    
    // Simple keyword matching (in a real app, use proper NLP)
    if (symptomsEnglish.toLowerCase().includes('fever')) {
      diagnosis = diagnosisMap.fever;
      remedies = remediesMap.fever;
    } else if (symptomsEnglish.toLowerCase().includes('cough')) {
      diagnosis = diagnosisMap.cough;
      remedies = remediesMap.cough;
    } else if (symptomsEnglish.toLowerCase().includes('headache')) {
      diagnosis = diagnosisMap.headache;
      remedies = remediesMap.headache;
    } else if (symptomsEnglish.toLowerCase().includes('stomach')) {
      diagnosis = diagnosisMap.stomach;
      remedies = remediesMap.stomach;
    }
    
    // Translate back to user's preferred language if needed
    if (language !== 'en') {
      diagnosis = await translateText(diagnosis, 'en', language);
      remedies = await translateText(remedies, 'en', language);
    }
    
    const symptomEntry = new Symptom({
      user: req.user._id,
      symptoms,
      language,
      diagnosis,
      remedies
    });
    
    await symptomEntry.save();
    
    // Generate audio responses
    const diagnosisAudio = await textToSpeech(diagnosis, language);
    const remediesAudio = await textToSpeech(remedies, language);
    
    res.json({
      symptomEntry,
      audio: {
        diagnosis: diagnosisAudio,
        remedies: remediesAudio
      }
    });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Get symptom history
exports.getHistory = async (req, res) => {
  try {
    const symptoms = await Symptom.find({ user: req.user._id }).sort({ date: -1 });
    res.json(symptoms);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


services/translationService.js


const axios = require('axios');
const config = require('../config/config');

// This is a generic translation service that can be implemented with any translation API
// Example using Google Cloud Translation API
exports.translateText = async (text, sourceLang, targetLang) => {
  try {
    // In a real implementation, you would call the actual translation API
    // This is a mock implementation
    
    if (sourceLang === targetLang) return text;
    
    // Mock translations for demonstration
    const mockTranslations = {
      'en-hi': {
        'fever': 'बुखार',
        'cough': 'खांसी',
        'headache': 'सिरदर्द',
        'stomach': 'पेट दर्द'
      },
      'hi-en': {
        'बुखार': 'fever',
        'खांसी': 'cough',
        'सिरदर्द': 'headache',
        'पेट दर्द': 'stomach'
      }
      // Add more mock translations as needed
    };
    
    const translationKey = `${sourceLang}-${targetLang}`;
    if (mockTranslations[translationKey] && mockTranslations[translationKey][text]) {
      return mockTranslations[translationKey][text];
    }
    
    // Fallback - in a real app, this would call the actual API
    return text;
    
    /*
    // Real implementation would look something like this:
    const response = await axios.post(
      `https://translation.googleapis.com/language/translate/v2?key=${config.TRANSLATION_API_KEY}`,
      {
        q: text,
        source: sourceLang,
        target: targetLang
      }
    );
    
    return response.data.data.translations[0].translatedText;
    */
  } catch (err) {
    console.error('Translation error:', err);
    throw new Error('Translation failed');
  }
};

services/ttsService.js

const axios = require('axios');
const config = require('../config/config');

// This is a generic text-to-speech service that can be implemented with any TTS API
// Example using Google Cloud Text-to-Speech API
exports.textToSpeech = async (text, language) => {
  try {
    // In a real implementation, you would call the actual TTS API
    // This is a mock implementation that returns a placeholder
    
    // Mock audio URLs for demonstration
    const mockAudio = {
      'en': 'https://example.com/audio/en/sample.mp3',
      'hi': 'https://example.com/audio/hi/sample.mp3'
      // Add more languages as needed
    };
    
    return mockAudio[language] || mockAudio['en'];
    
    /*
    // Real implementation would look something like this:
    const response = await axios.post(
      `https://texttospeech.googleapis.com/v1/text:synthesize?key=${config.TTS_API_KEY}`,
      {
        input: { text },
        voice: { languageCode: language },
        audioConfig: { audioEncoding: 'MP3' }
      }
    );
    
    return response.data.audioContent;
    */
  } catch (err) {
    console.error('TTS error:', err);
    throw new Error('Text-to-speech conversion failed');
  }
};

routes/authRoutes.js

const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');
const auth = require('../middleware/auth');

// User registration
router.post('/register', authController.register);

// User login
router.post('/login', authController.login);

// Get user profile (protected route)
router.get('/profile', auth, authController.getProfile);

// Update user profile (protected route)
router.put('/profile', auth, authController.updateProfile);

// User logout (protected route)
router.post('/logout', auth, authController.logout);

module.exports = router;

routes/symptomRoutes.js

const express = require('express');
const router = express.Router();
const symptomController = require('../controllers/symptomController');
const auth = require('../middleware/auth');

// Submit symptoms (protected route)
router.post('/symptoms', auth, symptomController.submitSymptoms);

// Get symptom history (protected route)
router.get('/history', auth, symptomController.getHistory);

module.exports = router;

middleware/auth.js

const jwt = require('jsonwebtoken');
const User = require('../models/User');
const config = require('../config/config');

const auth = async (req, res, next) => {
  try {
    const token = req.header('Authorization').replace('Bearer ', '');
    const decoded = jwt.verify(token, config.JWT_SECRET);
    const user = await User.findOne({ _id: decoded._id, 'tokens.token': token });
    
    if (!user) {
      throw new Error();
    }
    
    req.token = token;
    req.user = user;
    next();
  } catch (err) {
    res.status(401).json({ error: 'Please authenticate' });
  }
};

module.exports = auth;


app.js

const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const connectDB = require('./config/db');

// Initialize express app
const app = express();

// Connect to database
connectDB();

// Middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

// Routes
app.use('/api/auth', require('./routes/authRoutes'));
app.use('/api', require('./routes/symptomRoutes'));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

module.exports = app;

server.js

const app = require('./app');
const config = require('./config/config');

const PORT = config.PORT;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


package.json

{
  "name": "multilingual-medical-assistant",
  "version": "1.0.0",
  "description": "Backend for Multilingual Medical Assistant",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "axios": "^0.27.2",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.1",
    "express": "^4.18.1",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^6.4.4",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.19"
  }
}


.env

MONGODB_URI=mongodb://localhost:27017/medical_assistant
JWT_SECRET=your-secret-key
PORT=5000
TRANSLATION_API_KEY=your-translation-api-key
TTS_API_KEY=your-tts-api-key